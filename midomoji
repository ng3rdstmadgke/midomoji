#!/bin/bash

function usage {
cat >&2 <<EOF
#####################################################################################
# [ usage ]
#   ./midomoji <MODE> [ options ]
#
#   MODE build-dict      辞書のビルド
#        build-matrix    連接コスト表のビルド
#        build-config    設定ファイルのビルド
#        build-pos-info  品詞設定ファイルのビルド
#        build-meta-info 形態素のメタ情報オブジェクトをビルド
#        check-dict      辞書のチェックを行う
#        check-matrix    連接コスト表のチェックを行う
#        debug           デバッグコンソール起動
#        analyze         形態素解析
#
# [ options ]
#   --force   build*系のモードと合わせて使う。強制的にビルドを行う
#   -h        ヘルプ
#
#####################################################################################
EOF
exit 1
}

function errlog {
  MSG=$1
  echo "[Error] $MSG" >&2
  exit 1
}

function infolog {
  MSG=$1
  echo "[Info] $MSG" >&2
}

function file_exists {
for file in $@; do
  if [ ! -r "$file" ]; then
    errlog "$file がみつかりません。"
  fi
done
}

function should_build {
  SRC=$1
  DST=$2
  FORCE=$3
  if [ -z "$FORCE" -a -e "$SRC" -a -e "$DST" -a "$DST" -nt "$SRC" ]; then
    infolog "${SRC} よりも ${DST} のほうが新しいためビルドを行いません。"
    exit;
  fi
}

SCRIPT_DIR=$(cd $(dirname $0); pwd)
DICT_DIR=$SCRIPT_DIR/dictionary
MORPHEME=$DICT_DIR/morpheme.tsv
MATRIX=$DICT_DIR/matrix.tsv
DICT_BIN=$DICT_DIR/dict.bin
MATRIX_BIN=$DICT_DIR/matrix.bin
CONFIG_BIN=$DICT_DIR/config.bin
POS_INFO_BIN=$DICT_DIR/pos_info.bin
META_INFO_BIN=$DICT_DIR/meta_info.bin
ANALYZE_TARGET_FILE=
MODE=
FORCE=
while [ "$#" != 0 ]; do
  if [ "$1" = "-h" ]; then
    usage
  elif [ "$1" = "--force" ]; then
    FORCE=$1
  elif [ -z "$MODE" ]; then
    MODE=$1
  elif [ "$MODE" = "analyze" -a -z "$ANALYZE_TARGET_FILE" ]; then
    ANALYZE_TARGET_FILE=$1
  fi
  shift
done

if [ -z "$MODE" ]; then
  usage
fi

JAR_FILE=$SCRIPT_DIR/target/scala-2.12/midomoji.jar
file_exists $JAR_FILE

if [ "$MODE" = "build-dict" ]; then
  file_exists $MORPHEME
  should_build $MORPHEME $DICT_BIN $FORCE
  infolog "build dict ..."
  java -jar $JAR_FILE build-dict $DICT_DIR
elif [ "$MODE" = "build-matrix" ]; then
  file_exists $MATRIX
  should_build $MATRIX $MATRIX_BIN $FORCE
  infolog "build matrix ..."
  java -jar $JAR_FILE build-matrix $DICT_DIR
elif [ "$MODE" = "build-config" ]; then
  CHAR=$DICT_DIR/char.tsv
  CHAR_TYPE=$DICT_DIR/char_type.tsv
  UNK=$DICT_DIR/unk.tsv
  file_exists $CHAR $CHAR_TYPE $UNK
  should_build $CHAR $CONFIG_BIN $FORCE
  should_build $CHAR_TYPE $CONFIG_BIN $FORCE
  should_build $UNK $CONFIG_BIN $FORCE
  infolog "build config ..."
  java -jar $JAR_FILE build-config $DICT_DIR
elif [ "$MODE" = "build-pos-info" ]; then
  POS=$DICT_DIR/pos.tsv
  file_exists $POS
  should_build $POS $POS_INFO_BIN $FORCE
  infolog "build pos-info ..."
  java -jar $JAR_FILE build-pos-info $DICT_DIR
elif [ "$MODE" = "build-meta-info" ]; then
  file_exists $MORPHEME
  should_build $MORPHEME $META_INFO_BIN $FORCE
  infolog "build meta-info ..."
  java -jar $JAR_FILE build-meta-info $DICT_DIR
elif [ "$MODE" = "check-dict" ]; then
  file_exists $MORPHEME $DICT_BIN
  infolog "check dict ..."
  java -jar $JAR_FILE check-dict $DICT_DIR
elif [ "$MODE" = "check-matrix" ]; then
  file_exists $MATRIX $MATRIX_BIN
  infolog "check matrix ..."
  java -jar $JAR_FILE check-matrix $DICT_DIR
elif [ "$MODE" = "debug" ]; then
  file_exists $DICT_BIN $MATRIX_BIN $CONFIG_BIN $POS_INFO_BIN $META_INFO_BIN
  java -jar $JAR_FILE debug $DICT_DIR
elif [ "$MODE" = "analyze" ]; then
  java -jar $JAR_FILE analyze $ANALYZE_TARGET_FILE
else
  usage
fi

